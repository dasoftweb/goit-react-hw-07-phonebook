{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-opertations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","clearError","axios","defaults","baseURL","dispatch","a","get","data","name","number","contact","post","contactId","delete","getContactItems","state","contacts","items","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","handeChange","e","currentTarget","value","setState","capitalizeFirstLetter","string","replace","letter","toUpperCase","handleSubmit","preventDefault","props","onSubmit","some","item","alert","reset","this","className","type","onChange","pattern","title","required","Component","connect","contactsSelectors","contactsOperations","ContactItem","id","onDelete","onClick","map","target","App","fetchContacts","isLoadingContacts","contactsOpertations","initialState","createReducer","_","payload","onError","message","error","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReducer","contactsReducer","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aecea1cf.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  'contacts/fetchContactsRequest',\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  'contacts/fetchContactsSuccess',\r\n);\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\nexport const clearError = createAction('contacts/clearError');\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst addContact = (name, number) => async dispatch => {\r\n  const contact = { name, number };\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const { data } = await axios.post('/contacts', contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = contactId => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(`/contacts/${contactId}`);\r\n    dispatch(deleteContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nexport default { fetchContacts, addContact, deleteContact };\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getContactItems = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\n// const getVisibleContacts = state => {\r\n//   const filter = getFilter(state);\r\n//   const contacts = getContactItems(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n//   return contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n\r\n//!!!Мемоизация — сохранение (кеширование) результатов выполнения функций для предотвращения повторных вычислений.\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContactItems, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getContactItems,\r\n  getFilter,\r\n  getVisibleContacts,\r\n};\r\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-opertations';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handeChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: this.capitalizeFirstLetter(value) });\n  };\n\n  capitalizeFirstLetter = string => {\n    return string.replace(/(^\\w{1})|(\\s+\\w{1})/g, letter => letter.toUpperCase());\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const { name, number } = this.state;\n    const { items, onSubmit } = this.props;\n\n    if (items.some(item => item.name.toLowerCase() === name.toLowerCase())) {\n      return alert(`Name ${name} is already in contacts`);\n    }\n    if (\n      items.some(item => item.number.toLowerCase() === number.toLowerCase())\n    ) {\n      return alert(`Number ${number} is already in contacts`);\n    }\n\n    onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state; \n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label className=\"label\">\n          Name\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={name}\n            onChange={this.handeChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"label\">\n          Phone\n          <input\n            className=\"input\"\n            type=\"tel\"\n            value={number}\n            onChange={this.handeChange}\n            name=\"number\"\n            required\n          />\n        </label>\n        <button className=\"button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  items: contactsSelectors.getContactItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(contactsOperations.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, onDelete }) => (\n  <li className=\"contact-list-item\">\n    <p className=\"name bold\">{name}</p>\n    <p>{number}</p>\n    <button className=\"button\" onClick={() => onDelete(id)}>\n      Delete\n    </button>\n  </li>\n);\n\nContactItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\nimport ContactItem from '../ContactItem/ContactItem';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-opertations';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <ul className=\"contact-list\">\n    {contacts.map(({ id, name, number }) => (\n      <ContactItem\n        key={id}\n        id={id}\n        name={name}\n        number={number}\n        onDelete={onDelete}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: contactId => dispatch(contactsOperations.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"label\">\n    Find contacts by name\n    <input\n      className=\"input\"\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOpertations from './redux/contacts/contacts-opertations';\nimport contactsSelectors from './redux/contacts/contacts-selectors';\n\n// Components\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className=\"phonebook\">\n        <h1 className=\"phonebook_title\">Phonebook</h1>\n        <ContactForm />\n        <h2 className=\"phonebook_title\">Contacts</h2>\n        <Filter />\n        {this.props.isLoadingContacts && <h1>Loading</h1>}\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOpertations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n  clearError,\r\n} from './contacts-actions';\r\n\r\nconst initialState = {\r\n  contacts: [],\r\n  filter: '',\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst items = createReducer(initialState.contacts, {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(initialState.filter, {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst onError = (_, { payload: { message } }) => message;\r\n\r\nconst error = createReducer(initialState.error, {\r\n  [fetchContactsError]: onError,\r\n  [addContactError]: onError,\r\n  [deleteContactError]: onError,\r\n  [clearError]: () => null,\r\n});\r\n\r\nconst loading = createReducer(initialState.loading, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n  combineReducers,\r\n} from '@reduxjs/toolkit';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\nimport logger from 'redux-logger';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import 'modern-normalize/modern-normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/style.scss';\n\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}